- name: Change Keycloak admin password
  hosts: localhost
  gather_facts: yes
  collections:
    - kubernetes.core
    - middleware_automation.keycloak
  vars_files:
    - vars.yaml
  tasks:  
  - name: Get Keycloak Admin
    kubernetes.core.k8s_info:
      kind: Secret
      namespace: "{{ deployment_namespace }}"
      name: keycloak-admin
    register: keycloak_admin_secret

  - name: Set Keycloak admin cred facts
    set_fact:
      keycloak_admin_username: "{{ keycloak_admin_secret.resources[0].data.username | b64decode }}"
      keycloak_admin_password: "{{ keycloak_admin_secret.resources[0].data.password | b64decode }}"
    when: keycloak_admin_secret.resources | length > 0

  - name: Get Temp admin
    block:
    - name: Get Keycloak initial admin password
      kubernetes.core.k8s_info:
        kind: Secret
        namespace: "{{ deployment_namespace }}"
        name: keycloak-initial-admin
      register: keycloak_temp_admin_secret

    - name: Set Keycloak temp admin cred facts
      set_fact:
        keycloak_admin_username: "{{ keycloak_temp_admin_secret.resources[0].data.username | b64decode }}"
        keycloak_admin_password: "{{ keycloak_temp_admin_secret.resources[0].data.password | b64decode }}"
    when: keycloak_admin_secret.resources | length == 0

  - name: Ensure Keycloak Admin secret is found
    ansible.builtin.assert:
      that:
        - keycloak_admin_username is defined
        - keycloak_admin_password is defined
      fail_msg: "No Keycloak Admin secret found"

  - name: Generate new Keycloak admin username and password
    vars:
      password_generator: "{{ lookup('ansible.builtin.password', '/dev/null', length=password_length, chars=['ascii_letters', 'digits']) }}"
    ansible.builtin.set_fact:
      new_admin_username: "kcadmin-{{ 100 | random }}"
      new_admin_password: "{{ password_generator }}"

  - name: Create New Keycloak admin user
    community.general.keycloak_user:
      auth_keycloak_url: "https://sso.apps.cluster-2lrzw.2lrzw.sandbox2247.opentlc.com"
      auth_username: "{{ keycloak_admin_username }}"
      auth_password: "{{ keycloak_admin_password }}"
      auth_realm: "master"
      credentials:
        - type: password
          value: "{{ new_admin_password }}"
          temporary: false
      enabled: true
      realm: "master"
      state: present
      username: "{{ new_admin_username }}"
      email_verified: true
    register: keycloak_user_result

  - name: Set Keycloak admin permissions
    community.general.keycloak_user_rolemapping:
      auth_keycloak_url: "https://sso.apps.cluster-2lrzw.2lrzw.sandbox2247.opentlc.com"
      auth_username: "{{ keycloak_admin_username }}"
      auth_password: "{{ keycloak_admin_password }}"
      auth_realm: "master"
      target_username: "{{ new_admin_username }}"
      realm: "master"
      roles:
        - name: "admin"
        - name: "offline_access"
        - name: "create-realm"
      state: present

  - name: Delete Previous Keycloak admin
    community.general.keycloak_user:
      auth_keycloak_url: "https://sso.apps.cluster-2lrzw.2lrzw.sandbox2247.opentlc.com"
      auth_username: "{{ new_admin_username }}"
      auth_password: "{{ new_admin_password }}"
      auth_realm: "master"
      realm: "master"
      state: absent
      username: "{{ keycloak_admin_username }}"
    register: keycloak_user_del_result

  - name: Ensure Previous Keycloak admin is deleted
    vars:
      expected_message: "User {{ keycloak_admin_username }} deleted"
    ansible.builtin.assert:
      that:
        - keycloak_user_del_result.msg is defined
        - keycloak_user_del_result.msg == expected_message
      fail_msg: "Failed to delete previous Keycloak admin user"
      success_msg: "Previous Keycloak admin user deleted successfully"

  - name: Update Keycloak admin secret with new password
    kubernetes.core.k8s:
      state: present
      definition:
        apiVersion: v1
        kind: Secret
        metadata:
          name: keycloak-admin
          namespace: "{{ deployment_namespace }}"
        data:
          username: "{{ new_admin_username | b64encode }}"
          password: "{{ new_admin_password | b64encode }}"
